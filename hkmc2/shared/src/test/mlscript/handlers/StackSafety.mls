:js

// sanity check
:expect 5050
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
sum(100)
//│ = 5050

// preserve tail calls
// MUST see "return hi1(tmp)" in the output
:stackSafe 5
:handler
:expect 0
:sjs
fun hi(n) =
  if n == 0 then 0
  else hi(n - 1)
hi(0)
//│ JS (unsanitized):
//│ let hi1, res, handleBlock$1;
//│ hi1 = function hi(n) {
//│   let scrut, tmp, diff, diffGeqLimit, handlerExists, scrut1, dummy, res1, Cont$;
//│   Cont$ = function Cont$(pc1) { return new Cont$.class(pc1); };
//│   Cont$.class = class Cont$ extends globalThis.Predef.__Cont.class {
//│     constructor(pc) {
//│       let tmp1;
//│       tmp1 = super(null, null);
//│       this.pc = pc;
//│     }
//│     resume(value$) {
//│       if (this.pc === 0) {
//│         res1 = value$;
//│       }
//│       contLoop: while (true) {
//│         if (this.pc === 2) {
//│           scrut = n == 0;
//│           if (scrut === true) {
//│             return 0;
//│           } else {
//│             tmp = n - 1;
//│             globalThis.Predef.__stackDepth = globalThis.Predef.__stackDepth + 1;
//│             return hi1(tmp);
//│           }
//│           this.pc = 1;
//│           continue contLoop;
//│         } else if (this.pc === 1) {
//│           break contLoop;
//│         } else if (this.pc === 0) {
//│           dummy = res1;
//│           this.pc = 2;
//│           continue contLoop;
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$(" + this.pc + ")"; }
//│   };
//│   diff = globalThis.Predef.__stackDepth - globalThis.Predef.__stackOffset;
//│   diffGeqLimit = diff >= globalThis.Predef.__stackLimit;
//│   handlerExists = globalThis.Predef.__stackHandler !== undefined;
//│   scrut1 = diffGeqLimit && handlerExists;
//│   if (scrut1 === true) {
//│     res1 = globalThis.Predef.__stackHandler.perform();
//│     if (res1 instanceof globalThis.Predef.__EffectSig.class) {
//│       res1.tail.next = new Cont$.class(0);
//│       res1.tail = res1.tail.next;
//│       return res1;
//│     }
//│     dummy = res1;
//│   }
//│   scrut = n == 0;
//│   if (scrut === true) {
//│     return 0;
//│   } else {
//│     tmp = n - 1;
//│     globalThis.Predef.__stackDepth = globalThis.Predef.__stackDepth + 1;
//│     return hi1(tmp);
//│   }
//│ };
//│ handleBlock$1 = function handleBlock$() {
//│   let stackHandler, res1, Cont$, StackDelay$;
//│   StackDelay$ = class StackDelay$ extends globalThis.Predef.__StackDelay.class {
//│     constructor() {
//│       let tmp;
//│       tmp = super();
//│     }
//│     perform() {
//│       return globalThis.Predef.__mkEffect(stackHandler, (resume) => {
//│         let res2, curOffset, res3, Cont$1;
//│         Cont$1 = function Cont$(pc1) { return new Cont$.class(pc1); };
//│         Cont$1.class = class Cont$ extends globalThis.Predef.__Cont.class {
//│           constructor(pc) {
//│             let tmp;
//│             tmp = super(null, null);
//│             this.pc = pc;
//│           }
//│           resume(value$) {
//│             if (this.pc === 4) {
//│               res3 = value$;
//│             }
//│             contLoop: while (true) {
//│               if (this.pc === 4) {
//│                 res2 = res3;
//│                 return res2;
//│               }
//│               break;
//│             }
//│           }
//│           toString() { return "Cont$(" + this.pc + ")"; }
//│         };
//│         curOffset = globalThis.Predef.__stackOffset;
//│         globalThis.Predef.__stackOffset = globalThis.Predef.__stackDepth;
//│         res3 = resume();
//│         if (res3 instanceof globalThis.Predef.__EffectSig.class) {
//│           res3.tail.next = new Cont$1.class(4);
//│           res3.tail = res3.tail.next;
//│           return res3;
//│         }
//│         res2 = res3;
//│         return res2;
//│       });
//│     }
//│     toString() { return "StackDelay$"; }
//│   };
//│   stackHandler = new StackDelay$();
//│   Cont$ = function Cont$(pc1) { return new Cont$.class(pc1); };
//│   Cont$.class = class Cont$ extends globalThis.Predef.__Cont.class {
//│     constructor(pc) {
//│       let tmp;
//│       tmp = super(null, null);
//│       this.pc = pc;
//│     }
//│     resume(value$) {
//│       if (this.pc === 3) {
//│         res1 = value$;
//│       }
//│       contLoop: while (true) {
//│         if (this.pc === 3) {
//│           return res1;
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$(" + this.pc + ")"; }
//│   };
//│   globalThis.Predef.__stackLimit = 5;
//│   globalThis.Predef.__stackOffset = 0;
//│   globalThis.Predef.__stackDepth = 1;
//│   globalThis.Predef.__stackHandler = stackHandler;
//│   res1 = hi1(0);
//│   if (res1 instanceof globalThis.Predef.__EffectSig.class) {
//│     res1.tail.next = new Cont$(3);
//│     return globalThis.Predef.__handleBlockImpl(res1, stackHandler);
//│   }
//│   return res1;
//│ };
//│ res = handleBlock$1();
//│ if (res instanceof this.Predef.__EffectSig.class) {
//│   throw new this.Error("Unhandled effects");
//│ }
//│ this.Predef.__stackDepth = 0;
//│ this.Predef.__stackHandler = undefined;
//│ res
//│ = 0

:sjs
:stackSafe 1000
:handler
:expect 50005000
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
sum(10000)
//│ JS (unsanitized):
//│ let sum3, res1, handleBlock$3;
//│ sum3 = function sum(n) {
//│   let scrut, tmp, tmp1, tmp2, offsetGtDepth, prevDepth, diff, diffGeqLimit, handlerExists, scrut1, dummy, res2, res3, Cont$;
//│   Cont$ = function Cont$(pc1) { return new Cont$.class(pc1); };
//│   Cont$.class = class Cont$ extends globalThis.Predef.__Cont.class {
//│     constructor(pc) {
//│       let tmp3;
//│       tmp3 = super(null, null);
//│       this.pc = pc;
//│     }
//│     resume(value$) {
//│       if (this.pc === 1) {
//│         res3 = value$;
//│       } else if (this.pc === 0) {
//│         res2 = value$;
//│       }
//│       contLoop: while (true) {
//│         if (this.pc === 4) {
//│           scrut = n == 0;
//│           if (scrut === true) {
//│             return 0;
//│           } else {
//│             tmp = n - 1;
//│             prevDepth = globalThis.Predef.__stackDepth;
//│             globalThis.Predef.__stackDepth = globalThis.Predef.__stackDepth + 1;
//│             res3 = sum3(tmp);
//│             if (res3 instanceof globalThis.Predef.__EffectSig.class) {
//│               this.pc = 1;
//│               return globalThis.Predef.__appendInCont(res3, this);
//│             }
//│             this.pc = 1;
//│             continue contLoop;
//│           }
//│           this.pc = 2;
//│           continue contLoop;
//│         } else if (this.pc === 2) {
//│           break contLoop;
//│         } else if (this.pc === 1) {
//│           tmp2 = res3;
//│           globalThis.Predef.__stackDepth = prevDepth;
//│           offsetGtDepth = prevDepth < globalThis.Predef.__stackOffset;
//│           if (offsetGtDepth === true) {
//│             globalThis.Predef.__stackOffset = prevDepth;
//│             this.pc = 3;
//│             continue contLoop;
//│           }
//│           this.pc = 3;
//│           continue contLoop;
//│         } else if (this.pc === 3) {
//│           tmp1 = tmp2;
//│           return n + tmp1;
//│         } else if (this.pc === 0) {
//│           dummy = res2;
//│           this.pc = 4;
//│           continue contLoop;
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$(" + this.pc + ")"; }
//│   };
//│   diff = globalThis.Predef.__stackDepth - globalThis.Predef.__stackOffset;
//│   diffGeqLimit = diff >= globalThis.Predef.__stackLimit;
//│   handlerExists = globalThis.Predef.__stackHandler !== undefined;
//│   scrut1 = diffGeqLimit && handlerExists;
//│   if (scrut1 === true) {
//│     res2 = globalThis.Predef.__stackHandler.perform();
//│     if (res2 instanceof globalThis.Predef.__EffectSig.class) {
//│       res2.tail.next = new Cont$.class(0);
//│       res2.tail = res2.tail.next;
//│       return res2;
//│     }
//│     dummy = res2;
//│   }
//│   scrut = n == 0;
//│   if (scrut === true) {
//│     return 0;
//│   } else {
//│     tmp = n - 1;
//│     prevDepth = globalThis.Predef.__stackDepth;
//│     globalThis.Predef.__stackDepth = globalThis.Predef.__stackDepth + 1;
//│     res3 = sum3(tmp);
//│     if (res3 instanceof globalThis.Predef.__EffectSig.class) {
//│       res3.tail.next = new Cont$.class(1);
//│       res3.tail = res3.tail.next;
//│       return res3;
//│     }
//│     tmp2 = res3;
//│     globalThis.Predef.__stackDepth = prevDepth;
//│     offsetGtDepth = prevDepth < globalThis.Predef.__stackOffset;
//│     if (offsetGtDepth === true) {
//│       globalThis.Predef.__stackOffset = prevDepth;
//│     }
//│     tmp1 = tmp2;
//│     return n + tmp1;
//│   }
//│ };
//│ handleBlock$3 = function handleBlock$() {
//│   let stackHandler, res2, Cont$, StackDelay$;
//│   StackDelay$ = class StackDelay$ extends globalThis.Predef.__StackDelay.class {
//│     constructor() {
//│       let tmp;
//│       tmp = super();
//│     }
//│     perform() {
//│       return globalThis.Predef.__mkEffect(stackHandler, (resume) => {
//│         let res3, curOffset, res4, Cont$1;
//│         Cont$1 = function Cont$(pc1) { return new Cont$.class(pc1); };
//│         Cont$1.class = class Cont$ extends globalThis.Predef.__Cont.class {
//│           constructor(pc) {
//│             let tmp;
//│             tmp = super(null, null);
//│             this.pc = pc;
//│           }
//│           resume(value$) {
//│             if (this.pc === 6) {
//│               res4 = value$;
//│             }
//│             contLoop: while (true) {
//│               if (this.pc === 6) {
//│                 res3 = res4;
//│                 return res3;
//│               }
//│               break;
//│             }
//│           }
//│           toString() { return "Cont$(" + this.pc + ")"; }
//│         };
//│         curOffset = globalThis.Predef.__stackOffset;
//│         globalThis.Predef.__stackOffset = globalThis.Predef.__stackDepth;
//│         res4 = resume();
//│         if (res4 instanceof globalThis.Predef.__EffectSig.class) {
//│           res4.tail.next = new Cont$1.class(6);
//│           res4.tail = res4.tail.next;
//│           return res4;
//│         }
//│         res3 = res4;
//│         return res3;
//│       });
//│     }
//│     toString() { return "StackDelay$"; }
//│   };
//│   stackHandler = new StackDelay$();
//│   Cont$ = function Cont$(pc1) { return new Cont$.class(pc1); };
//│   Cont$.class = class Cont$ extends globalThis.Predef.__Cont.class {
//│     constructor(pc) {
//│       let tmp;
//│       tmp = super(null, null);
//│       this.pc = pc;
//│     }
//│     resume(value$) {
//│       if (this.pc === 5) {
//│         res2 = value$;
//│       }
//│       contLoop: while (true) {
//│         if (this.pc === 5) {
//│           return res2;
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$(" + this.pc + ")"; }
//│   };
//│   globalThis.Predef.__stackLimit = 1000;
//│   globalThis.Predef.__stackOffset = 0;
//│   globalThis.Predef.__stackDepth = 1;
//│   globalThis.Predef.__stackHandler = stackHandler;
//│   res2 = sum3(10000);
//│   if (res2 instanceof globalThis.Predef.__EffectSig.class) {
//│     res2.tail.next = new Cont$(5);
//│     return globalThis.Predef.__handleBlockImpl(res2, stackHandler);
//│   }
//│   return res2;
//│ };
//│ res1 = handleBlock$3();
//│ if (res1 instanceof this.Predef.__EffectSig.class) {
//│   throw new this.Error("Unhandled effects");
//│ }
//│ this.Predef.__stackDepth = 0;
//│ this.Predef.__stackHandler = undefined;
//│ res1
//│ = 50005000

// stack-overflows without :stackSafe
:re
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
sum(10000)
//│ ═══[RUNTIME ERROR] RangeError: Maximum call stack size exceeded

:handler
:stackSafe 100
mut val ctr = 0
fun dummy(x) = x
fun foo(f) = 
  if ctr > 10000 then 0
  else 
    set ctr += 1
    dummy(f(f))
foo(foo)
//│ = 0
//│ ctr = 10001

:stackSafe 1000
:handler
:expect 50005000
val foo =
  val f = n =>
    if n <= 0 then 0
    else n + f(n-1)
  f(10000)
foo
//│ = 50005000
//│ foo = 50005000

:re
fun foo() =
  val f = n =>
    if n <= 0 then 0
    else n + f(n-1)
  f(10000)
foo()
//│ ═══[RUNTIME ERROR] RangeError: Maximum call stack size exceeded

abstract class Eff with
  fun perform(a): ()

// functions and lambdas inside handlers
:handler
:stackSafe 100
:expect 50005000
fun foo(h) = h.perform
handle h = Eff with
  fun perform(resume) =
    val f = n =>
      if n <= 0 then 0
      else n + f(n-1)
    resume(f(10000))
foo(h)
//│ = 50005000

// function call and defn inside handler
:handler
:stackSafe 100
:expect 50005000
handle h = Eff with
  fun perform(resume) =
    val f = n =>
      if n <= 0 then 0
      else n + f(n-1)
    resume(f(10000))
in
  fun foo(h) = h.perform
  foo(h)
//│ = 50005000

:re
:handler
fun foo(h) = h.perform(2)
handle h = Eff with
  fun perform(a)(resume) =
    val f = n =>
      if n <= 0 then 0
      else n + f(n-1)
    resume(f(10000))
foo(h)
//│ ═══[RUNTIME ERROR] RangeError: Maximum call stack size exceeded

:handler
:stackSafe
:sjs
fun max(a, b) = if a < b then b else a
//│ JS (unsanitized):
//│ let max1;
//│ max1 = function max(a, b) {
//│   let scrut;
//│   scrut = a < b;
//│   if (scrut === true) {
//│     return b;
//│   } else {
//│     return a;
//│   }
//│ };
//│ null


// * Note that currently the `:sjs` command will not run the code if there is a compilation error
:sjs
:stackSafe 42
:ge
fun hi(n) = n
hi(0)
//│ ═══[COMPILATION ERROR] This code requires effect handler instrumentation but was compiled without it.
//│ JS (unsanitized):
//│ let hi3, stackHandler;
//│ hi3 = function hi(n) {
//│   return n;
//│ };
//│ throw globalThis.Error("This code requires effect handler instrumentation but was compiled without it.");

:stackSafe 42
:ge
:re
hi(0)
//│ ═══[COMPILATION ERROR] This code requires effect handler instrumentation but was compiled without it.
//│ ═══[RUNTIME ERROR] Error: This code requires effect handler instrumentation but was compiled without it.


:stackSafe 1000
:handler
:expect 100010000
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
fun bad() = sum(10000) + sum(10000)
bad()
//│ = 100010000
