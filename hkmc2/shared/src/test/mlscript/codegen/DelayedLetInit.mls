:js

:global
:sjs


let x
//│ JS (unsanitized):
//│ null

x = 1
//│ JS (unsanitized):
//│ this.x = 1; null

x
//│ JS (unsanitized):
//│ this.x
//│ = 1

// TODO forbid redefining a let
x = 2
//│ JS (unsanitized):
//│ this.x = 2; null

x
//│ JS (unsanitized):
//│ this.x
//│ = 2


let y = 1
//│ JS (unsanitized):
//│ this.y = 1; null
//│ y = 1

:e
z = 1
//│ ╔══[ERROR] Name not found: z
//│ ║  l.37: 	z = 1
//│ ╙──      	^
//│ JS (unsanitized):
//│ /* error */


fun f() = 1
//│ JS (unsanitized):
//│ function f() { return 1; } null

f
//│ JS (unsanitized):
//│ this.f
//│ = [Function: f]


let f
f(x) = x + 1
//│ JS (unsanitized):
//│ this.f = (x) => { return x + 1; }; null
//│ f = [Function (anonymous)]

f(1)
//│ JS (unsanitized):
//│ this.f(1) ?? null
//│ = 2


let foo
foo = 0
//│ JS (unsanitized):
//│ this.foo = 0; null
//│ foo = 0

:fixme
let foo
if true
then foo = 0
else foo = 1
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.76: 	then foo = 0
//│ ╙──      	         ^
//│ JS (unsanitized):
//│ let scrut;
//│ scrut = true;
//│ if (scrut === true) {
//│   this.foo
//│ } else {
//│   throw new this.Error("match error");
//│ }
//│ = 0
//│ foo = 0

let foo
if true
then
  foo = 0
else
  foo = 1
//│ JS (unsanitized):
//│ let scrut; scrut = true; if (scrut === true) { this.foo = 0; null } else { this.foo = 1; null }
//│ foo = 0


fun f() =
  foo = 42
//│ JS (unsanitized):
//│ function f() { globalThis.foo = 42; return null; } null

f()
//│ JS (unsanitized):
//│ this.f()

foo
//│ JS (unsanitized):
//│ this.foo
//│ = 42


:fixme
fun f() = foo = 0
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.119: 	fun f() = foo = 0
//│ ╙──       	              ^
//│ JS (unsanitized):
//│ function f() { return globalThis.foo; } null


