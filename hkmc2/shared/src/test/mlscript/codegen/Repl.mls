:js


fun res

val res: Int

:showRepl
fun res() = 1
//│ REPL> Sending: let res;try { res = function res(...args) {   globalThis.Predef.checkArgs("res", 0, true, args.length);   return 1; }; null } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  null
//│ REPL> Parsed:
//│ >  null

:showRepl
2 + 2
//│ REPL> Sending: try { 2 + 2 } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  4
//│ REPL> Parsed:
//│ >  4
//│ = 4

:showRepl
res
//│ REPL> Sending: try { res } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  [Function: res]
//│ REPL> Parsed:
//│ >  [Function: res]
//│ = [Function: res]


:showRepl
:re
let x = 1, log(x), x
//│ REPL> Sending: let x, selRes, tmp, tmp1;try { x = 1; selRes = this.log; if (selRes === undefined) {   throw new this.Error("Access to required field 'log' yielded 'undefined'"); } else {   tmp = selRes; } tmp1 = tmp(x) ?? null; x } catch (e) { console.log('\u200B' + e + '\u200B'); }
//│ REPL> Collected:
//│ >  ​Error: Access to required field 'log' yielded 'undefined'​
//│ >  undefined
//│ REPL> Parsed:
//│ >  [runtime error] Error: Access to required field 'log' yielded 'undefined'
//│ ═══[RUNTIME ERROR] Error: Access to required field 'log' yielded 'undefined'
//│ REPL> Sending: try { x } catch (e) { console.log('\u200B' + e + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ REPL> Parsed:
//│ >  1
//│ x = 1

:import PredefJS.mls
//│ Imported 2 member(s)

:showRepl
let x = 1, log(x), x
//│ REPL> Sending: let x1, tmp2;try { x1 = 1; tmp2 = log(x1); x1 } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ >  1
//│ REPL> Parsed:
//│ >  1
//│ >  1
//│ > 1
//│ = 1
//│ REPL> Sending: try { x1 } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ REPL> Parsed:
//│ >  1
//│ x = 1


// FIXME multiline result is treated as part stdout
["***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***"]
//│ > [
//│ >   '***', '***', '***',
//│ >   '***', '***', '***',
//│ >   '***', '***', '***',
//│ >   '***', '***', '***',
//│ >   '***', '***', '***'
//│ = ]


