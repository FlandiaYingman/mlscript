:js

:import PredefJS.mls
//│ Imported 2 member(s)

:global
:sjs


class Foo()
//│ JS (unsanitized):
//│ let Foo1;
//│ Foo1 = function Foo() { return new Foo.class(); };
//│ Foo1.class = class Foo {
//│   constructor() {}
//│   toString() { return "Foo(" +  + ")"; }
//│ };
//│ null

Foo
//│ JS (unsanitized):
//│ Foo1
//│ = [Function: Foo] { class: [class Foo] }

Foo()
//│ JS (unsanitized):
//│ Foo1()
//│ = Foo {}

Foo.class
//│ JS (unsanitized):
//│ Foo1.class
//│ = [class Foo]


class Foo(a)
//│ JS (unsanitized):
//│ let Foo3;
//│ Foo3 = function Foo(a1) { return new Foo.class(a1); };
//│ Foo3.class = class Foo {
//│   constructor(a) {
//│     this.a = a;
//│   }
//│   toString() { return "Foo(" + this.a + ")"; }
//│ };
//│ null

Foo
//│ JS (unsanitized):
//│ Foo3
//│ = [Function: Foo] { class: [class Foo] }

Foo(1)
//│ JS (unsanitized):
//│ Foo3(1)
//│ = Foo { a: 1 }

Foo(1).a
//│ JS (unsanitized):
//│ let tmp; tmp = Foo3(1); tmp.a
//│ = 1

fun foo(y) = Foo(y)
foo(27)
//│ JS (unsanitized):
//│ let foo1; foo1 = function foo(y) { return Foo3(y); }; foo1(27)
//│ = Foo { a: 27 }


class Foo(a, b)
//│ JS (unsanitized):
//│ let Foo5;
//│ Foo5 = function Foo(a1, b1) { return new Foo.class(a1, b1); };
//│ Foo5.class = class Foo {
//│   constructor(a, b) {
//│     this.a = a;
//│     this.b = b;
//│   }
//│   toString() { return "Foo(" + this.a + ", " + this.b + ")"; }
//│ };
//│ null

let foo = Foo
//│ JS (unsanitized):
//│ let foo2; foo2 = Foo5; null
//│ foo = [Function: Foo] { class: [class Foo] }

let f = foo(1, 2)
//│ JS (unsanitized):
//│ let f, tmp1; tmp1 = foo2(1, 2) ?? null; f = tmp1; null
//│ f = Foo { a: 1, b: 2 }

let f = new foo(1, 2)
//│ JS (unsanitized):
//│ let f1, tmp2; tmp2 = new foo2(1, 2); f1 = tmp2; null
//│ f = Foo { a: 1, b: 2 }

f.a
//│ JS (unsanitized):
//│ f1.a
//│ = 1

f.b
//│ JS (unsanitized):
//│ f1.b
//│ = 2

let f = Foo(1, 2)
//│ JS (unsanitized):
//│ let f2, tmp3; tmp3 = Foo5(1, 2); f2 = tmp3; null
//│ f = Foo { a: 1, b: 2 }

f.a
//│ JS (unsanitized):
//│ f2.a
//│ = 1

f.b
//│ JS (unsanitized):
//│ f2.b
//│ = 2

Foo(log(1), log(2))
//│ JS (unsanitized):
//│ let tmp4, tmp5; tmp4 = log1(1); tmp5 = log1(2); Foo5(tmp4, tmp5)
//│ > 1
//│ > 2
//│ = Foo { a: null, b: null }


class Inner(c) with
  fun i1(d) = c + d
  log(c)
//│ JS (unsanitized):
//│ let Inner1;
//│ Inner1 = function Inner(c1) { return new Inner.class(c1); };
//│ Inner1.class = class Inner {
//│   constructor(c) {
//│     this.c = c;
//│     log1(this.c)
//│   }
//│   i1(d) {
//│     return this.c + d;
//│   }
//│   toString() { return "Inner(" + this.c + ")"; }
//│ };
//│ null

let i = new Inner(100)
//│ JS (unsanitized):
//│ let i, tmp6; tmp6 = new Inner1.class(100); i = tmp6; null
//│ > 100
//│ i = Inner { c: 100 }

i.i1(20)
//│ JS (unsanitized):
//│ i.i1(20) ?? null
//│ = 120


