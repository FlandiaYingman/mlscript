:parseOnly


f of ()
//│ Parsed:
//│ 	App(Ident(f),Tup(List(Unt())))

f of 1
//│ Parsed:
//│ 	App(Ident(f),Tup(List(IntLit(1))))

f of (1)
//│ Parsed:
//│ 	App(Ident(f),Tup(List(Bra(Round,IntLit(1)))))

f of 1, 2
//│ Parsed:
//│ 	App(Ident(f),Tup(List(IntLit(1), IntLit(2))))

f of 1, 2, 3
//│ Parsed:
//│ 	App(Ident(f),Tup(List(IntLit(1), IntLit(2), IntLit(3))))

f of (1, 2, 3)
//│ Parsed:
//│ 	App(Ident(f),Tup(List(Bra(Round,Block(List(IntLit(1), IntLit(2), IntLit(3)))))))

f of g(1)
//│ Parsed:
//│ 	App(Ident(f),Tup(List(App(Ident(g),Tup(List(IntLit(1)))))))

f of g of 1
//│ Parsed:
//│ 	App(Ident(f),Tup(List(App(Ident(g),Tup(List(IntLit(1)))))))

(f of g) of 1
//│ Parsed:
//│ 	App(Bra(Round,App(Ident(f),Tup(List(Ident(g))))),Tup(List(IntLit(1))))

(f of g)(1)
//│ Parsed:
//│ 	App(Bra(Round,App(Ident(f),Tup(List(Ident(g))))),Tup(List(IntLit(1))))

f of (g)(1)
//│ Parsed:
//│ 	App(Ident(f),Tup(List(App(Bra(Round,Ident(g)),Tup(List(IntLit(1)))))))


f of
  1,
  2,
  3
//│ Parsed:
//│ 	App(Ident(f),Tup(List(IntLit(1), IntLit(2), IntLit(3))))

f of
  1
  2
  3
//│ Parsed:
//│ 	App(Ident(f),Tup(List(IntLit(1), IntLit(2), IntLit(3))))


:pe
log
of 1
//│ ╔══[PARSE ERROR] Expected start of statement in this position; found 'of' keyword instead
//│ ║  l.66: 	of 1
//│ ╙──      	^^
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.66: 	of 1
//│ ╙──      	   ^
//│ Parsed:
//│ 	Ident(log)
//│ 	Error()

:fixme
print of 
123
//│ ╔══[PARSE ERROR] Expected an expression; found new line instead
//│ ║  l.78: 	print of 
//│ ║        	         ^
//│ ║  l.79: 	123
//│ ╙──      	
//│ Parsed:
//│ 	App(Ident(print),Tup(List(Error())))
//│ 	IntLit(123)


